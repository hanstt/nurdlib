# nurdlib, NUstar ReaDout LIBrary
#
# Copyright (C) 2015-2020, 2022, 2024
# Bastian Löher
# Hans Toshihide Törnqvist
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA

### Global settings

# Important note: Internal triggers will not properly propagate to the TO,
#   if the termination jumpers are not present (not set) on the module.

## Readout setup
# Bitmask to enable/disable readout of channels
# use_external_trigger = ()       # no channels
# use_external_trigger = (1) or 1 # only channel 1
# use_external_trigger = 3..5     # channels 3 to 5
channels_to_read = 0..15

# Do the readout of module data?
# If false, it will skip the module in the readout
readout = true

## Trigger setup
# Enabling both internal and external triggers will
# store sampled data on either of these events.
#
# Bitmask to enable/disable external triggering per channel
use_external_trigger = 0..15

# Which channels contribute to TO signal (OR-ed)
trigger_output = 0..15

# Bitmask to enable/disable internal triggering per channel
use_internal_trigger = ()
#
# Bitmask to enable triggering on negative AND positive threshold
# triggers, when running sum increases above positive trigger threshold AND
#           when running sum decreases below negative trigger threshold
use_dual_threshold = ()
#
# Enable / disable ADC dithering.
# This option can improve linearity, but may increase noise
use_dithering = false

#
# Enable data discarding. This is a bitmask, each bit corresponds to a channel
# When enabled, discard data based on discard_threshold.
# * ###     DANGEROUS    ### *
# * THIS OPTION DISCARDS DATA CONVERTED BY THE MODULE !
# * ### USE WITH CAUTION ### *
# Average mode MUST be enabled.
# use_maw3 MUST be turned off.
discard_data = ()

#
# Discard threshold (integer).
# Not implemented yet.
discard_threshold = 0

#
# Discard/potential discard if a trigger event comes too soon after a previous trigger event in the same channe.l
# Maximum inverse time period to be accepted (double).
discard_on_high_rate = 0. kHz

# Discard for specific DRASI/MBS trigger types (0 to 15)
discard_on_trigger_type = ()

# No discard for specific DRASI/MBS trigger types (0 to 15)
readout_on_trigger_type = ()

# Discard if flag for internal trigger (status flag, bit 26) is not set
discard_if_no_int_trigger = ()


# Value for the input offset DAC. Range -0x8000..0x8000
# Default is 0, so a 0 V signal should produce a baseline in the middle of
# the ADC range
offset = (0 {16})

## Gate / Veto setup
# Note: Also enable internal triggers when using an external
# gate or veto.
#
# Bitmask to enable usage of an external gate per channel
# This can be used as a Region of Interest (RoI) trigger
# to select only useful internal triggers, when running
# in an asynchronous mode. Connect external gate to TI input.
# If the gate comes late, also use the internal_trigger_delay
# settings to delay the internal triggers.
# This requires to set up proper coincidence between the
# internal triggers and the external gate.
use_external_gate = ()
#
# Bitmask to enable usage of an external veto signal per channel
# This will suppress any trigger during an active veto.
# Connect external veto to UI input.
use_external_veto = ()

# Enable automatic bank switching in asynchronous mode
# This needs an additional cable to connect UO and UI of the module
# Optionally, if UI is already taken, one can change the code to use TI.
use_auto_bank_switch = true

# Enable use of tau correction for energy MAW signal
# This is usually only needed for signals with long exponential
# decay, such as from HPGe or other silicon detectors
use_tau_correction = ()

# Enable user counter. This increments a counter on every TI input
# Counter is cleared on UI input.
use_user_counter = false

# 2V | 5V
range = (5V {4})
use_termination = true

# check_level = one of sloppy, paranoid
check_level = paranoid

# BLT mode = $noblt, blt[_fifo], mblt[_fifo], 2esst[_fifo], fastest
blt_mode = noblt

### Default settings (for scintillator type signals)

## Clock setup

# Sampling clock frequency (either 25, 125, 250 MHz)
clk_freq = 250 MHz

# Frequency of clock signal connected to external clock input (CI)
# Either 10, 20, 50 MHz, or 0 MHz (the default, means nothing is connected)
# Setting this to a value different from 0 enables the external input as
# clock source.
ext_clk_freq = 0 MHz

# Tap delay fine tune value
# This is needed, if one experiences mixing of data between adjacent channels
# One possible source could be a slightly out of range external clock frequency
# Possible values are [-32 .. 32], each step adds / subtracts 40 ps from the
# tap delay.
tap_delay_fine_tune = 0

# Use the rataclock timestamp / clock synchronisation protocol
# This must be connected to TI, and TO must be connected to CI
use_rataclock = false

# When rataclock is used, one can use the loopback on the VXS connector.
# This requires some soldering, as detailed in the manual.
use_clock_from_vxs = false

# When rataclock is used, one can choose to use the timestamp received
use_rataclock_timestamp = false

### Setup parameters for rataclock receiver (0 .. 65550)
rataclock_receive_delay = 0 ns
# 125 MHz sender base clock frequency -> 8 ns per clock (0 .. 1023)
rataclock_clk_period = 8 ns
# Number of sender clock cycles per bitslot (0 .. 63)
rataclock_pulse_period_clk = 5
# Use auto edge (to find out the correct value)
rataclock_use_auto_edge = true
# The signal edge to expect (0 = 00, 1 = 01, 2 = 10, 3 = 11)
rataclock_expect_edge = 0

## Event data format

# Write two accumulator values (for gates 6 and 7)
use_accumulator2 = false
# Write six accumulator values (for gates 0 - 5)
use_accumulator6 = false
# Write three values from the MAW trigger output (maximum, before trigger and
# after trigger)
# These allow to improve trigger time resolution offline
use_maw3 = false
# Write the determined energy (start energy and maximum energy)
use_maxe = true
# Calculate the charge integral of the pulse
use_peak_charge = false

## Data output
# Enable writing of raw traces
write_traces_raw = false
# Enable writing of moving average filter output (MAW) for trigger
# Choose only one of write_traces_maw and write_traces_maw_energy
write_traces_maw = false
# Enable writing of moving average filter output (MAW) for energy
write_traces_maw_energy = false
# Enable writing of energy histograms
write_histograms = false



# Front panel bus master
# If module is controlling others, set to true.
# Set to false, if module is controlled by a master module
is_fpbus_master = true

## Signal properties
# Average over baseline samples (32 | 64 | 128 | 256)
baseline_average = 64
baseline_delay = 0
# Signal decay time used for energy moving average (tau factor)
# Also used to determine signal length
signal_decaytime = (4000 ns {16})
# Signal polarity is either -1 (negative) or 1 (positive)
signal_polarity = (1 {16})

## Internal trigger settings
# Enable the CFD trigger mechanism (only for internal trigger)
use_cfd_trigger = true
# Channel threshold in mV
threshold = (20 mV {16})
# High energy threshold in mV (upper threshold)
threshold_high_e = (2000 mV {16})
# Don't trigger on signals above high energy threshold
high_e_rejection = ()
# Peaking time for trigger moving average
# Calculated from signal properties
peak = (5 {16})
# Gap time for trigger moving average
gap = (2 {16})
# Internal trigger delay
internal_trigger_delay = (0 ns {16})

## Energy filter settings
# Energy filter peaking time, should be 0.3 * signal risetime
peak_e = (20 {16})
# Energy filter gap time, should be similar to peak_e
gap_e = (20 {16})

## Averaging mode setup
# Average mode: 0 (off), number of samples (4, 8, 16, ..., 256)
average_mode = (256 {4})
# Average mode pretrigger delay: 0, 1, 2, ... 4094 samples
average_pretrigger = (0 {4})
# Average mode sample length: 0, 2, 4, ... 65534 samples
average_length = (0 {4})

# Energy pickup index (for MAW filtered energy value)
# Set to 0 in order to use maximum of MAW trace
energy_pickup = (0 {16})

## Accumulator gate setup (integrating over input pulse)
GATE(0) {
	# e.g. Baseline
	time_after_trigger = 0 ns
	width = 30 ns
}
GATE(1) {
	# e.g. scintillator Q1 integration window
	time_after_trigger = 40 ns
	width = 30 ns
}
GATE(2) {
	# e.g. scintillator Q2 integration window
	time_after_trigger = 40 ns
	width = 60 ns
}
GATE(3) {
	time_after_trigger = 0 ns
	width = 100 ns
}
GATE(4) {
	time_after_trigger = 0 ns
	width = 200 ns
}
GATE(5) {
	time_after_trigger = 0 ns
	width = 500 ns
}
GATE(6) {
	time_after_trigger = 0 ns
	width = 500 ns
}
GATE(7) {
	time_after_trigger = 0 ns
	width = 500 ns
}

## Trace readout setup
TRACES(raw) {
	sample_length = (100 ns {4})
	# RAW pretrigger delay: 2, 4, .. 1022
	pretrigger_delay = (100 ns {4})
}
TRACES(maw) {
	# MAW sample length: 0, 2, .. 2048 samples
	sample_length = (2048 {4})
	# MAW pretrigger delay: 2, 4, .. 1022
	pretrigger_delay = (100 {4})
}
TRACES(maw_energy) {
	# MAW sample length: 0, 2, .. 2048 samples
	sample_length = (2048 {4})
	# MAW pretrigger delay: 2, 4, .. 1022
	pretrigger_delay = (100 {4})
}

#PRESET(labr) {
#	# 32 | 64 | 128 | 256
#	baseline_average = 32
#	baseline_delay = 0
#	clk_freq = 250 MHz
#	signal_decaytime = (40 ns, 40 ns, 40 ns, 40 ns,
#			40 ns, 40 ns, 40 ns, 40 ns,
#			40 ns, 40 ns, 40 ns, 40 ns,
#			40 ns, 40 ns, 40 ns, 40 ns)
#	signal_polarity = neg
#	use_cfd_trigger = true
#	use_maw3 = true
#	use_maxe = true
#	use_peak_charge = false
#	use_accumulator2 = false
#}
#PRESET(hpge) {
#	baseline_average = 64
#	baseline_delay = 0
#	clk_freq = 125 MHz
#	signal_decaytime = (50000 ns, 50000 ns, 50000 ns, 50000 ns,
#			50000 ns, 50000 ns, 50000 ns, 50000 ns,
#			50000 ns, 50000 ns, 50000 ns, 50000 ns,
#			50000 ns, 50000 ns, 50000 ns, 50000 ns)
#	signal_polarity = neg
#	use_cfd_trigger = true
#	use_maw3 = true
#	use_maxe = true
#	use_peak_charge = false
#	use_accumulator2 = false
#}
#PRESET(liquid) {
#	baseline_average = 32
#	baseline_delay = 0
#	clk_freq = 250 MHz
#	signal_decaytime = (50 ns, 50 ns, 50 ns, 50 ns,
#			50 ns, 50 ns, 50 ns, 50 ns,
#			50 ns, 50 ns, 50 ns, 50 ns,
#			50 ns, 50 ns, 50 ns, 50 ns)
#	signal_polarity = neg
#	use_cfd_trigger = true
#	use_maw3 = false
#	use_maxe = false
#	use_peak_charge = false
#	use_accumulator2 = true
#}
