# nurdlib, NUstar ReaDout LIBrary
#
# Copyright (C) 2023-2024
# Hans Toshihide TÃ¶rnqvist
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301  USA

# Rely on SIGBUS to terminate buffer reading.
berr = false
# Extended BLT addressing will set address bits 0..23 to 0!
blt_ext = false
blt_mode = noblt

# Rounded up to 0.5V or 2.0V.
range = (2.0 V {16})

# Raw values from 0 to
threshold = (0 {16})

# Width of pulses for coincidence triggering.
# In steps of 8 (16) ns for *730 (*725), rounded up, from 0 to 2040 (4080).
pulse_width = (30.0 ns {16})

# Channel-couple self-trigger (N even):
# Bits 0..1:
#  0: ch(N) AND ch(N+1).
#  1: ch(N)
#  2: ch(N+1)
#  3: ch(N) OR ch(N+1)
# Bit 2:
#  0: use pulse_width as configured above.
#  1: use discriminator output without stretching.
trigger_method = (0x3 {8})

# DC offset in raw values.
offset = (0 {16})
# Sleep after DC offset has been set.
init_sleep = 1 s

clock_input = internal

# Trigger setting, all OR:ed together.
#  Channels.
trigger_channel = ()
#  Majority trigger, if # overlapping channels reach "level", fire!
majority_width = 0 ns
majority_level = 0
#  Use lemo input for trigger.
trigger_input = lemo

# # samples taken after trigger.
sample_length = 0

# Lemo level.
lemo = nim
# Output trigger?
trigger_output = true
# LVDS config.
lvds = (0 {4})

# Channels to read out.
channel_enable = (0..15)
